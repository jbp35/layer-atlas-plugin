# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerAtlasDockWidget
                                 A QGIS plugin
 Discover and share geospatial layers easily within QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Atelier JBP
        email                : jbpeter@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.gui import QgsDockWidget, QgisInterface
from qgis.PyQt import uic
from qgis.PyQt.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebChannel import QWebChannel
from qgis.PyQt.QtCore import QUrl, Qt, pyqtSignal

from .src.backend import Backend

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Layer_Atlas_dockwidget_base.ui'))


class LayerAtlasDockWidget(QgsDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, _iface: QgisInterface = None):
        """Constructor."""
        super().__init__()
        self.iface = _iface
        self.setObjectName("LayerAtlasPlugin")
        self.setWindowTitle(self.tr("Layer Atlas"))

        self.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        self.view = CustomWebEngineView()
        self.setWidget(self.view)
        
    # # For dev only
    # def keyPressEvent(self, event):
    #     if event.key() == Qt.Key_F10:
    #         self.debug_window = QtWidgets.QDialog()
    #         self.dev_view = CustomWebEngineView()
    #         debug_layout = QtWidgets.QHBoxLayout()
    #         debug_layout.setContentsMargins(0, 0, 0, 0)
    #         debug_layout.addWidget(self.dev_view)
    #         self.debug_window.setLayout(debug_layout)
    #         self.view.page().setDevToolsPage(self.dev_view.page())
    #         self.debug_window.show()

    #     if event.key() == Qt.Key_F5:
    #         self.view.reload()


class CustomWebEngineView(QWebEngineView):
    def __init__(self, *args, **kwargs):
        super(CustomWebEngineView, self).__init__(*args, **kwargs)

        self.setAcceptDrops(True)
        self.setContextMenuPolicy(Qt.NoContextMenu)

        self.backend = Backend()
        self.channel = QWebChannel()
        self.page().setWebChannel(self.channel)
        self.channel.registerObject("backend", self.backend)

        url = QUrl("http://localhost:9000/")
        # url = QUrl("https://main.d14mu6vxpysgnb.amplifyapp.com/")

        self.setUrl(url)

    def dragEnterEvent(self, event):
        event.accept()

    def dropEvent(self, event):
        # TODO: check mimeData type
        layer_definition = event.mimeData().data(
            "application/qgis.layertree.layerdefinitions"
        )
        xml_data = layer_definition.data().decode("utf-8")
        self.backend.EmitCreateLayer.emit(xml_data)

        event.ignore()