# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerAtlasDockWidget
                                 A QGIS plugin
 Discover and share geospatial layers easily within QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Atelier JBP
        email                : jbpeter@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.gui import QgsDockWidget, QgisInterface
from qgis.PyQt import uic, QtWidgets

from qgis.PyQt.QtCore import Qt, pyqtSignal
from qgis.core import (QgsMessageLog, QgsMapLayerType,)
from .src.customWebEngineView import CustomWebEngineView

try:
    from .src.customWebEngineView import CustomWebEngineView
    QWebEngineView_available = True
except ImportError:
    QWebEngineView_available = False

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "Layer_Atlas_dockwidget_base.ui")
)

class LayerAtlasDockWidget(QgsDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()
    
    def __init__(self, _iface: QgisInterface = None):
        """Constructor."""
        super().__init__()
        self.iface = _iface
        self.setObjectName("LayerAtlasPlugin")
        self.setWindowTitle(self.tr("Layer Atlas"))
        self.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        if QWebEngineView_available:
            self.view = CustomWebEngineView(self.iface)
            self.add_custom_actions_to_layer_tree()
        else:
            # Show a message if QWebEngineView is not available
            from .src.dependencies import get_html_page
            self.view = get_html_page()

        self.setWidget(self.view) 
            
    def add_custom_actions_to_layer_tree(self):
        """Add custom actions to the layer tree context menu for uploading layers to Layer Atlas."""
        self.contextMenuActions = []
        for layer_type in QgsMapLayerType:
            uploadAction = QtWidgets.QAction("Upload layer to Layer Atlas")
            uploadAction.triggered.connect(self.view.add_layer_to_layer_atlas)
            self.iface.addCustomActionForLayerType(uploadAction, None, layer_type, True)
            self.contextMenuActions.append(uploadAction)
            
    def remove_custom_actions_from_layer_tree(self):
        """Removes custom actions from the layer tree context menu."""
        for uploadAction in self.contextMenuActions:
            self.iface.removeCustomActionForLayerType(uploadAction)
        self.contextMenuActions = []
        
    
    def keyPressEvent(self, event):
        """Handle key press events for debugging and reloading the plugin."""
        
        if event.key() == Qt.Key_F10:
            self.debug_window = QtWidgets.QDialog()
            self.dev_view = CustomWebEngineView(self.iface)
            debug_layout = QtWidgets.QHBoxLayout()
            debug_layout.setContentsMargins(0, 0, 0, 0)
            debug_layout.addWidget(self.dev_view)
            self.debug_window.setLayout(debug_layout)
            self.view.page().setDevToolsPage(self.dev_view.page())
            self.debug_window.show()

        if event.key() == Qt.Key_F5:
            self.view.reload()


    def cleanup(self):
        """Cleanup the plugin on close."""
        self.remove_custom_actions_from_layer_tree()




