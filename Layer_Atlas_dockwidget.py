# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerAtlasDockWidget
                                 A QGIS plugin
 Discover and share geospatial layers easily within QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-07-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Atelier JBP
        email                : jbpeter@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import tempfile

from qgis.gui import QgsDockWidget, QgisInterface
from qgis.PyQt import uic, QtWidgets

from qgis.PyQt.QtCore import QUrl, Qt, pyqtSignal
from qgis.core import (
    QgsMessageLog,
    Qgis,
    QgsMapLayerType,
    QgsLayerDefinition,
)


# Attempt to import QWebEngineView and set a flag
try:
    from qgis.PyQt.QtWebEngineWidgets import QWebEngineView, QWebEngineSettings

    QWebEngineView_available = True
except ImportError:
    QWebEngineView_available = False
    QgsMessageLog.logMessage(
        "Failed to import QWebEngineView. Make sure you installed required dependencies (https://github.com/jbp35/layer-atlas-plugin)",
        "Layer Atlas",
        level=Qgis.Critical,
    )

from PyQt5.QtWebChannel import QWebChannel

from .src.backend import Backend

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "Layer_Atlas_dockwidget_base.ui")
)


class LayerAtlasDockWidget(QgsDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, _iface: QgisInterface = None):
        """Constructor."""
        super().__init__()
        self.iface = _iface
        self.setObjectName("LayerAtlasPlugin")
        self.setWindowTitle(self.tr("Layer Atlas"))
        self.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        if QWebEngineView_available:
            self.view = CustomWebEngineView(self.iface)
        else:
            # Show a message if QWebEngineView is not available
            self.view = getInstallationGuide()

        self.setWidget(self.view)

        # Add a custom action to upload raster layers

        self.contextMenuActions = []

        self.layer_types = [
            QgsMapLayerType.RasterLayer,
            QgsMapLayerType.VectorLayer,
            QgsMapLayerType.PluginLayer,
            QgsMapLayerType.MeshLayer,
            QgsMapLayerType.VectorTileLayer,
            QgsMapLayerType.PointCloudLayer,
        ]

        for layer_type in self.layer_types:
            action = QtWidgets.QAction("Add layer to Layer Atlas")
            action.triggered.connect(self.view.addLayerToLayerAtlas)
            self.iface.addCustomActionForLayerType(action, None, layer_type, True)
            self.contextMenuActions.append(action)

    # # For dev only
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_F10:
            self.debug_window = QtWidgets.QDialog()
            self.dev_view = CustomWebEngineView(self.iface)
            debug_layout = QtWidgets.QHBoxLayout()
            debug_layout.setContentsMargins(0, 0, 0, 0)
            debug_layout.addWidget(self.dev_view)
            self.debug_window.setLayout(debug_layout)
            self.view.page().setDevToolsPage(self.dev_view.page())
            self.debug_window.show()

        if event.key() == Qt.Key_F5:
            self.view.reload()

    def cleanup(self):
        for action in self.contextMenuActions:
            self.iface.removeCustomActionForLayerType(action)


# Only define CustomWebEngineView if QWebEngineView is available
if QWebEngineView_available:

    class CustomWebEngineView(QWebEngineView):
        def __init__(self, _iface, *args, **kwargs):
            super(CustomWebEngineView, self).__init__(*args, **kwargs)
            self.iface = _iface
            self.setAcceptDrops(True)
            self.setContextMenuPolicy(Qt.NoContextMenu)
            
            settings = self.settings()
            settings.setAttribute(QWebEngineSettings.JavascriptEnabled, True)
            settings.setAttribute(QWebEngineSettings.LocalStorageEnabled, True)
            settings.setAttribute(QWebEngineSettings.JavascriptCanOpenWindows, True)
            settings.setAttribute(QWebEngineSettings.WebGLEnabled, True)

            # Configure QWebChannel
            self.backend = Backend()
            self.channel = QWebChannel()
            self.page().setWebChannel(self.channel)
            self.channel.registerObject("backend", self.backend)

            # url = QUrl("http://localhost:9000/?qgis=true")
            url = QUrl("https://www.layeratlas.com/?qgis=true")

            self.setUrl(url)

        def dragEnterEvent(self, event):
            event.accept()

        def dropEvent(self, event):
            # TODO: check mimeData type
            layer_definition = event.mimeData().data(
                "application/qgis.layertree.layerdefinitions"
            )
            xml_data = layer_definition.data().decode("utf-8")
            self.backend.EmitCreateLayer.emit(xml_data)

            event.ignore()

        def addLayerToLayerAtlas(self):
            layerTreeView = self.iface.layerTreeView()
            selectedNodes = layerTreeView.selectedNodes()
            temp_file_path = "temp.qlr"
            QgsLayerDefinition.exportLayerDefinition(temp_file_path, [selectedNodes[0]])
            with open(temp_file_path, "r") as file:
                layer_definition_xml = file.read()
                self.backend.EmitCreateLayer.emit(layer_definition_xml)
            os.remove(temp_file_path)


def getInstallationGuide():
    readme_viewer = QtWidgets.QTextEdit()
    readme_viewer.setReadOnly(True)
    current_file_dir = os.path.dirname(os.path.abspath(__file__))
    readme_path = os.path.join(current_file_dir, "missing_QWebEngineView.html")
    with open(readme_path, "r", encoding="utf-8") as file:
        readme_viewer.setHtml(file.read())

    return readme_viewer
